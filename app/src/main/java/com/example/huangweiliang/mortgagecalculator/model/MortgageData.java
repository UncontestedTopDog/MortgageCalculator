package com.example.huangweiliang.mortgagecalculator.model;import android.os.SystemClock;import com.example.huangweiliang.mortgagecalculator.MortgageApp;import com.google.gson.annotations.Expose;import com.google.gson.annotations.SerializedName;import com.greendao.gen.MorHistoryDataDao;public class MortgageData extends BaseData {    public static final String RESULTDATA = "RESULTDATA";    public static final int MORTGAGE_COMMERCIAL = 0x00; //商业    public static final int MORTGAGE_FUND = 0x01;       //公积金    public static final int MORTGAGE_COMPOSE = 0x02;    //组合    public static final int REPAYMENT_AC = 0x00;       //等额本金    public static final int REPAYMENT_ACPI = 0x01;     //等额本息    @SerializedName("morType")    @Expose    private int morType = MORTGAGE_COMMERCIAL;    @SerializedName("repayType")    @Expose    private int repayType = REPAYMENT_AC;    @SerializedName("comLoan")    @Expose    private double comLoan = 100 * 10000 ;    @SerializedName("comRate")    @Expose    private double comRate = 4.90/1200;    @SerializedName("fundLoan")    @Expose    private double fundLoan =  3.25/1200;    @SerializedName("fundRate")    @Expose    private double fundRate = 0 * 10000;    @SerializedName("repayment")    @Expose    private int repayment = 20 * 12;    public MortgageData(int morType, int repayType, double comLoan, double comRate, double fundLoan, double fundRate, int repayment) {        this.morType = morType;        this.repayType = repayType;        this.comLoan = comLoan;        this.comRate = comRate;        this.fundLoan = fundLoan;        this.fundRate = fundRate;        this.repayment = repayment;    }    public MortgageData() {    }    public int getMorType() {        return morType;    }    public void setMorType(int morType) {        this.morType = morType;    }    public int getRepayType() {        return repayType;    }    public void setRepayType(int repayType) {        this.repayType = repayType;    }    public double getComLoan() {        return comLoan;    }    public void setComLoan(double comLoan) {        this.comLoan = comLoan * 10000;    }    public double getComRate() {        return comRate;    }    public void setComRate(double comRate) {        this.comRate = comRate;    }    public double getFundLoan() {        return fundLoan;    }    public void setFundLoan(double fundLoan) {        this.fundLoan = fundLoan * 10000;    }    public double getFundRate() {        return fundRate;    }    public void setFundRate(double fundRate) {        this.fundRate = fundRate;    }    public int getRepayment() {        return repayment;    }    public void setRepayment(int repayment) {        this.repayment = repayment;    }    public ResultData[][] calculator() {        double residualComLoan =  comLoan ;        double residualFundLoan =  fundLoan ;        ResultData[][] resultDatas = new ResultData[2][repayment];        for (int i =  0; i < repayment ; i++){            resultDatas[0][i] = new ResultData();            resultDatas[1][i] = new ResultData();        }        switch (repayType){            case REPAYMENT_AC:                switch (morType){                    case MORTGAGE_COMMERCIAL:                        for (int i = 0 ; i  < repayment ; i++){                            resultDatas[0][i].setPay(comLoan*(comRate*(Math.pow((1 + comRate), repayment)))                                    /((Math.pow((1 + comRate), repayment))-1));                            resultDatas[0][i].setInterest(residualComLoan*comRate);                            resultDatas[0][i].setPrincipal(resultDatas[0][i].getPay() - resultDatas[0][i].getInterest());                            residualComLoan = residualComLoan - resultDatas[0][i].getPrincipal();                            resultDatas[0][i].setResidualLoan(residualComLoan);                            resultDatas[1][i].setPay(0);                            resultDatas[1][i].setInterest(0);                            resultDatas[1][i].setPrincipal(0);                            resultDatas[1][i].setResidualLoan(0);                        }                        break;                    case MORTGAGE_FUND:                        for (int i = 0 ; i  < repayment ; i++){                            resultDatas[1][i].setPay(fundLoan*(fundRate*(Math.pow((1 + fundRate), repayment)))                                    /((Math.pow((1 + fundRate), repayment))-1));                            resultDatas[1][i].setInterest(residualFundLoan*fundRate);                            resultDatas[1][i].setPrincipal(resultDatas[1][i].getPay() - resultDatas[1][i].getInterest());                            residualFundLoan = residualFundLoan - resultDatas[1][i].getPrincipal();                            resultDatas[1][i].setResidualLoan(residualFundLoan);                            resultDatas[0][i].setPay(0);                            resultDatas[0][i].setInterest(0);                            resultDatas[0][i].setPrincipal(0);                            resultDatas[0][i].setResidualLoan(0);                        }                        break;                    case MORTGAGE_COMPOSE:                        for (int i = 0 ; i  < repayment ; i++){                            resultDatas[0][i].setPay(comLoan*(comRate*(Math.pow((1 + comRate), repayment)))                                    /((Math.pow((1 + comRate), repayment))-1));                            resultDatas[0][i].setInterest(residualComLoan*comRate);                            resultDatas[0][i].setPrincipal(resultDatas[0][i].getPay() - resultDatas[0][i].getInterest());                            residualComLoan = residualComLoan - resultDatas[0][i].getPrincipal();                            resultDatas[0][i].setResidualLoan(residualComLoan);                            resultDatas[1][i].setPay(fundLoan*(fundRate*(Math.pow((1 + fundRate), repayment)))                                    /((Math.pow((1 + fundRate), repayment))-1));                            resultDatas[1][i].setInterest(residualFundLoan*fundRate);                            resultDatas[1][i].setPrincipal(resultDatas[1][i].getPay() - resultDatas[1][i].getInterest());                            residualFundLoan = residualFundLoan - resultDatas[1][i].getPrincipal();                            resultDatas[1][i].setResidualLoan(residualFundLoan);                        }                        break;                }                break;            case REPAYMENT_ACPI:                switch (morType){                    case MORTGAGE_COMMERCIAL:                        for (int i = 0 ; i  < repayment ; i++){                            resultDatas[0][i].setPrincipal(comLoan / repayment);                            resultDatas[0][i].setInterest(residualComLoan*comRate);                            resultDatas[0][i].setPay(resultDatas[0][i].getPrincipal()+resultDatas[0][i].getInterest());                            residualComLoan = residualComLoan - resultDatas[0][i].getPrincipal();                            resultDatas[0][i].setResidualLoan(residualComLoan);                            resultDatas[1][i].setPrincipal(0);                            resultDatas[1][i].setInterest(0);                            resultDatas[1][i].setPay(0);                            resultDatas[1][i].setResidualLoan(0);                        }                        break;                    case MORTGAGE_FUND:                        for (int i = 0 ; i  < repayment ; i++){                            resultDatas[1][i].setPrincipal(fundLoan / repayment);                            resultDatas[1][i].setInterest(residualFundLoan*fundRate);                            resultDatas[1][i].setPay(resultDatas[1][i].getPrincipal()+resultDatas[1][i].getInterest());                            residualFundLoan = residualFundLoan - resultDatas[1][i].getPrincipal();                            resultDatas[1][i].setResidualLoan(residualFundLoan);                            resultDatas[0][i].setPrincipal(0);                            resultDatas[0][i].setInterest(0);                            resultDatas[0][i].setPay(0);                            resultDatas[0][i].setResidualLoan(0);                        }                        break;                    case MORTGAGE_COMPOSE:                        for (int i = 0 ; i  < repayment ; i++){                            resultDatas[0][i].setPrincipal(comLoan / repayment);                            resultDatas[0][i].setInterest(residualComLoan*comRate);                            resultDatas[0][i].setPay(resultDatas[0][i].getPrincipal()+resultDatas[0][i].getInterest());                            residualComLoan = residualComLoan - resultDatas[0][i].getPrincipal();                            resultDatas[0][i].setResidualLoan(residualComLoan);                            resultDatas[1][i].setPrincipal(fundLoan / repayment);                            resultDatas[1][i].setInterest(residualFundLoan*fundRate);                            resultDatas[1][i].setPay(resultDatas[1][i].getPrincipal()+resultDatas[1][i].getInterest());                            residualFundLoan = residualFundLoan - resultDatas[1][i].getPrincipal();                            resultDatas[1][i].setResidualLoan(residualFundLoan);                        }                        break;                }                break;        }        return resultDatas;    }}