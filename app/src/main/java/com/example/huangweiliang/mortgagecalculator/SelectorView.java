package com.example.huangweiliang.mortgagecalculator;import android.content.Context;import android.content.res.TypedArray;import android.support.annotation.Nullable;import android.util.AttributeSet;import android.view.View;import android.view.animation.Animation;import android.view.animation.TranslateAnimation;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;public class SelectorView extends LinearLayout{    private int itemSum = 0;    private TextView[] chooses = new TextView[3];    private ImageView chooseView;    private int chooseItem = 0;    private int minItem = 1 ;    private int maxItem = 3 ;    private int[] chooseIds = {R.id.first_choose, R.id.second_choose, R.id.third_choose};    private String[] chooseTexts = {"第一", "第二", "第三"};    private ISelectorCallback selectorCallback;    private String id ;    public SelectorView(Context context) {        super(context);        initView(null);    }    public SelectorView(Context context, @Nullable AttributeSet attrs) {        super(context, attrs);        initView(attrs);    }    public SelectorView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        initView(attrs);    }    public void setSelectorCallback(ISelectorCallback iSelectorCallback, String id ) {        this.selectorCallback = iSelectorCallback;        this.id = id ;    }    private void initView(final AttributeSet attrs) {        inflate(getContext(), R.layout.choose_view, this);        if (attrs != null) {            TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.SelectorView);            itemSum = ta.getInteger(R.styleable.SelectorView_itemSum, 1);            chooseTexts[0] = ta.getString(R.styleable.SelectorView_firstItemText);            chooseTexts[1] = ta.getString(R.styleable.SelectorView_secondItemText);            chooseTexts[2] = ta.getString(R.styleable.SelectorView_thirdItemText);            ta.recycle();        }        itemSum = itemSum < minItem ? 1 : itemSum > maxItem ? 3 : itemSum;        chooseView = findViewById(R.id.choose_view);        for (int item = 0; item < itemSum; item++) {            chooses[item] = findViewById(chooseIds[item]);            chooses[item].setText(chooseTexts[item]);            chooses[item].setVisibility(VISIBLE);            final int finalItem = item;            chooses[item].setOnClickListener(new OnClickListener() {                @Override                public void onClick(View view) {                    onMainClick(finalItem);                    switch (finalItem){                        case 0 :                            if (selectorCallback!=null)                                selectorCallback.onClickFirst(id);                            break;                        case 1 :                            if (selectorCallback!=null)                                selectorCallback.onClickSecond(id);                            break;                        case 2 :                            if (selectorCallback!=null)                                selectorCallback.onClickThird(id);                            break;                    }                }            });        }    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) chooseView.getLayoutParams();        layoutParams.width = getWidth() / itemSum ;        layoutParams.height = getHeight();        chooseView.setLayoutParams(layoutParams);    }    private void onMainClick(int selectItem){        for (int item = 0 ; item < itemSum ; item++)            chooses[item].setTextColor(getResources().getColor(R.color.unChooseTextColor));        chooses[selectItem].setTextColor(getResources().getColor(R.color.chooseTextColor));        startShowAnim(chooseView, chooseItem, selectItem);        chooseItem = selectItem;    }    private void startShowAnim(final View view, final int from, final int to) {        TranslateAnimation translateAni = new TranslateAnimation(                Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF,                to - from, Animation.RELATIVE_TO_SELF, 0,                Animation.RELATIVE_TO_SELF, 0);        translateAni.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {                for (int item = 0 ;  item < itemSum ; item++)                    chooses[item].setClickable(false);            }            @Override            public void onAnimationEnd(Animation animation) {                view.clearAnimation();                RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view.getLayoutParams();                layoutParams.leftMargin = to * getWidth() / itemSum;                layoutParams.rightMargin = 0 ;                layoutParams.topMargin = 0 ;                layoutParams.bottomMargin = 0 ;                view.setLayoutParams(layoutParams);                for (int item = 0 ;  item < itemSum ; item++)                    chooses[item].setClickable(true);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        translateAni.setDuration(200);        view.startAnimation(translateAni);    }}