package com.example.huangweiliang.mortgagecalculator;import android.util.Log;import java.math.BigDecimal;public class Mortgage {    //com 商业    //fund 公积金    public BaseData com  = new BaseData();    public BaseData fund =  new BaseData();    public Enum.MortgageType mortgageType = Enum.MortgageType.Commercial;    public Enum.RepaymentType repaymentType = Enum.RepaymentType.AC ;    public void calculator() {        switch (repaymentType){            case AC:                double residualLoan =  com.loan ;                for (int i = 0 ; i  < com.repayment ; i++){                    com.pays[i] = formatDouble(com.loan * (com.rate * com.getIndex()) / (com.getIndex() - 1));                    com.interests[i] = formatDouble(residualLoan*com.rate);                    com.principals[i] = formatDouble(com.pays[i] - com.interests[i]);                    residualLoan = residualLoan - com.principals[i];                    com.residualLoans[i] = residualLoan;                }                residualLoan =  fund.loan ;                for (int i = 0 ; i  < fund.repayment ; i++){                    fund.pays[i] = formatDouble(fund.loan * (fund.rate * fund.getIndex()) / (fund.getIndex() - 1));                    fund.interests[i] = formatDouble(residualLoan*fund.rate);                    fund.principals[i] = formatDouble(fund.pays[i] - fund.interests[i]);                    residualLoan = residualLoan - fund.principals[i];                    fund.residualLoans[i] = residualLoan;                }                break;            case ACPI:                double residualLoan2 =  com.loan ;                for (int i = 0 ; i  < com.repayment ; i++){                    com.principals[i] = formatDouble(com.loan / com.repayment);                    com.interests[i] = formatDouble(residualLoan2*com.rate);                    com.pays[i] = formatDouble(com.principals[i] + com.interests[i]);                    residualLoan2 = residualLoan2 - com.principals[i];                    com.residualLoans[i] = residualLoan2;                }                residualLoan2 =  fund.loan ;                for (int i = 0 ; i  < fund.repayment ; i++){                    fund.principals[i] = formatDouble(fund.loan / fund.repayment);                    fund.interests[i] = formatDouble(residualLoan2*fund.rate);                    fund.pays[i] = formatDouble(fund.principals[i] + fund.interests[i]);                    residualLoan2 = residualLoan2 - fund.principals[i];                    fund.residualLoans[i] = residualLoan2;                }                break;        }        switch (mortgageType){            case Commercial:                Log.i("ASDADADAD1",String.valueOf(com.getAllPay())+"   "+String.valueOf(com.getAllInterest()));                break;            case Fund:                Log.i("ASDADADAD2",String.valueOf(fund.getAllPay())+"   "+String.valueOf(fund.getAllInterest()));                break;            case Compose:                Log.i("ASDADADAD3",String.valueOf(com.getAllPay())+"   "+String.valueOf(com.getAllInterest()));                Log.i("ASDADADAD4",String.valueOf(fund.getAllPay())+"   "+String.valueOf(fund.getAllInterest()));                break;        }    }    public class BaseData{        public double rate = 4.90/1200;      //月利率        private int repayment = 20*12;     //还款期数        private double loan = 100 * 10000 ;    //商业贷款金额        public double[] interests = new double[repayment];        //每月支付利息        public double[] principals = new double[repayment];        //每月偿还本金        public double[] pays = new double[repayment];          //每月偿还本息        public double[] residualLoans = new double[repayment];      //剩余本金        public void setRepayment(int repayment) {            this.repayment = repayment;            interests = null ;            interests = new double[repayment];            principals = null ;            principals = new double[repayment];            pays = null ;            pays = new double[repayment];            residualLoans = null ;            residualLoans = new double[repayment];        }        public void setLoan(double loan) {            this.loan = loan*10000;        }        public int getRepayment() {            return repayment;        }        public double getIndex() {            return (Math.pow((1 + rate), repayment));        }        public double getAllPay(){            double allPay = 0 ;            for (int i = 0 ;  i < repayment ; i++)                allPay = formatDouble(allPay+pays[i]);            return formatDouble(allPay/10000);        }        public double getAllInterest(){            double allInterest = 0 ;            for (int i = 0 ;  i < repayment ; i++)                allInterest = formatDouble(allInterest+interests[i]);            return formatDouble(allInterest/10000);        }    }    public double formatDouble(double f){        BigDecimal b = new BigDecimal(f);        return b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();    }}