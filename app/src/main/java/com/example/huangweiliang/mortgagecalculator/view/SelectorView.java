package com.example.huangweiliang.mortgagecalculator.view;import android.content.Context;import android.content.res.TypedArray;import android.support.annotation.Nullable;import android.util.AttributeSet;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.example.huangweiliang.mortgagecalculator.listener.ISelectorCallback;import com.example.huangweiliang.mortgagecalculator.R;public class SelectorView extends LinearLayout{    private int itemSum = 0;    private TextView[] chooses = new TextView[3];    private ImageView[] chooseViews = new ImageView[3];    private int chooseItem = 0;    private int minItem = 1 ;    private int maxItem = 3 ;    private int[] chooseIds = {R.id.first_choose, R.id.second_choose, R.id.third_choose};    private int[] chooseViewIds = {R.id.first_choose_view, R.id.second_choose_view, R.id.third_choose_view};    private String[] chooseTexts = {"第一", "第二", "第三"};    private ISelectorCallback selectorCallback;    private LinearLayout chooseLayout;    public SelectorView(Context context) {        super(context);        initView(null);    }    public SelectorView(Context context, @Nullable AttributeSet attrs) {        super(context, attrs);        initView(attrs);    }    public SelectorView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        initView(attrs);    }    public void setSelectorCallback(ISelectorCallback iSelectorCallback) {        this.selectorCallback = iSelectorCallback;    }    private void initView(final AttributeSet attrs) {        inflate(getContext(), R.layout.selector_view, this);        if (attrs != null) {            TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.SelectorView);            itemSum = ta.getInteger(R.styleable.SelectorView_itemSum, 1);            chooseTexts[0] = ta.getString(R.styleable.SelectorView_firstItemText);            chooseTexts[1] = ta.getString(R.styleable.SelectorView_secondItemText);            chooseTexts[2] = ta.getString(R.styleable.SelectorView_thirdItemText);            ta.recycle();        }        itemSum = itemSum < minItem ? 1 : itemSum > maxItem ? 3 : itemSum;        chooseLayout = (LinearLayout) findViewById(R.id.choose_layout);        chooseLayout.setWeightSum(itemSum);        for (int item = 0; item < itemSum; item++) {            chooses[item] = (TextView) findViewById(chooseIds[item]);            chooses[item].setText(chooseTexts[item]);            chooses[item].setVisibility(VISIBLE);            chooseViews[item] = (ImageView) findViewById(chooseViewIds[item]);            chooseViews[item].setVisibility(INVISIBLE);            final int finalItem = item;            chooses[item].setOnClickListener(new OnClickListener() {                @Override                public void onClick(View view) {                    onMainClick(finalItem);                    switch (finalItem){                        case 0 :                            if (selectorCallback!=null)                                selectorCallback.onClickFirst();                            break;                        case 1 :                            if (selectorCallback!=null)                                selectorCallback.onClickSecond();                            break;                        case 2 :                            if (selectorCallback!=null)                                selectorCallback.onClickThird();                            break;                    }                }            });        }        chooseViews[0].setVisibility(VISIBLE);    }    private void onMainClick(int selectItem){        for (int item = 0 ; item < itemSum ; item++)            chooses[item].setTextColor(getResources().getColor(R.color.unselect_text_color));        chooses[selectItem].setTextColor(getResources().getColor(R.color.select_text_color));        startShowAnim(chooseViews[chooseItem], chooseItem, selectItem);        chooseItem = selectItem;    }    private void startShowAnim(final View view, final int from, final int to) {        int anim ;        if (from - to == -1)            anim = R.anim.left_to_right_one_step;        else if (from - to == -2)            anim = R.anim.left_to_right_two_step;        else if (from - to == 1)            anim = R.anim.right_to_left_one_step;        else if (from - to == 2)            anim = R.anim.right_to_left_two_step;        else return;        Animation translate = AnimationUtils.loadAnimation(getContext(), anim);        translate.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                chooseViews[from].setVisibility(INVISIBLE);                chooseViews[to].setVisibility(VISIBLE);            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        view.startAnimation(translate);    }}